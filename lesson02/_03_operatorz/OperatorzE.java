package lesson02._03_operatorz;

// Побитовые (Bitwise) операции.
// Побитовые или поразрядные операции выполняются
// над отдельными разрядами или битами чисел.
//
// Нужны для:
// - Реализации криптографических алгоритмов;
// - Реализации любых других алгоритмов требующих работу с битами.
public class OperatorzE {

    public static void main(String[] args) {

        int num1 = 11;  // 11 = 00001011
        int num2 = 22;  // 22 = 00010110
        int result;

        // Сравниваются соответствующие биты num1 и num2 и генерируют 1,
        // если оба бита равны, иначе он возвращает 0.
        // Здесь вернется: 2, что равно 00000010, потому что в двоичной форме
        // num1 и num2 совпадают только вторые последние биты ,
        result = num1 & num2;
        System.out.println("num1 & num2: " + result);

        // Сравнивает соответствующие биты num1 и num2 и генерирует 1,
        // если любой бит равен 1, иначе он возвращает 0.
        // Здесь вернется 31, что является 00011111
        result = num1 | num2;
        System.out.println("num1 | num2: " + result);

        // Сравнивает соответствующие биты num1 и num2 и генерирует 1,
        // если они не равны, иначе возвращает 0.
        // Здесь вернется 29, что эквивалентно 00011101
        result = num1 ^ num2;
        System.out.println("num1 ^ num2: " + result);

        // ~ является оператором дополнения, который просто меняет
        // бит с 0 на 1 и с 1 на 0.
        // Здесь вернется -12, что соответствует 8-битному знаку,
        // эквивалентному 11110100
        result = ~num1;
        System.out.println("~num1: " + result);

        // << оператор сдвига влево, который перемещает биты влево,
        // отбрасывает крайний левый бит и присваивает крайнему правому
        // биту значение 0.
        // Здесь вернется 44, что эквивалентно 00101100.
        result = num1 << 2;
        System.out.println("num1 << 2: " + result);

        // >> оператор сдвига вправо, который перемещает биты вправо,
        // отбрасывает крайний правый бит и назначает крайнему левому
        // биту значение 0.
        // Здесь вернется 2, что эквивалентно 00000010
        result = num1 >> 2;
        System.out.println("num1 >> 2: " + result);
    }
}
